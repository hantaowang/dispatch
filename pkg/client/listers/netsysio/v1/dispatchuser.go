/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/hantaowang/dispatch/pkg/apis/netsysio/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DispatchUserLister helps list DispatchUsers.
type DispatchUserLister interface {
	// List lists all DispatchUsers in the indexer.
	List(selector labels.Selector) (ret []*v1.DispatchUser, err error)
	// DispatchUsers returns an object that can list and get DispatchUsers.
	DispatchUsers(namespace string) DispatchUserNamespaceLister
	DispatchUserListerExpansion
}

// dispatchUserLister implements the DispatchUserLister interface.
type dispatchUserLister struct {
	indexer cache.Indexer
}

// NewDispatchUserLister returns a new DispatchUserLister.
func NewDispatchUserLister(indexer cache.Indexer) DispatchUserLister {
	return &dispatchUserLister{indexer: indexer}
}

// List lists all DispatchUsers in the indexer.
func (s *dispatchUserLister) List(selector labels.Selector) (ret []*v1.DispatchUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DispatchUser))
	})
	return ret, err
}

// DispatchUsers returns an object that can list and get DispatchUsers.
func (s *dispatchUserLister) DispatchUsers(namespace string) DispatchUserNamespaceLister {
	return dispatchUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DispatchUserNamespaceLister helps list and get DispatchUsers.
type DispatchUserNamespaceLister interface {
	// List lists all DispatchUsers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.DispatchUser, err error)
	// Get retrieves the DispatchUser from the indexer for a given namespace and name.
	Get(name string) (*v1.DispatchUser, error)
	DispatchUserNamespaceListerExpansion
}

// dispatchUserNamespaceLister implements the DispatchUserNamespaceLister
// interface.
type dispatchUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DispatchUsers in the indexer for a given namespace.
func (s dispatchUserNamespaceLister) List(selector labels.Selector) (ret []*v1.DispatchUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DispatchUser))
	})
	return ret, err
}

// Get retrieves the DispatchUser from the indexer for a given namespace and name.
func (s dispatchUserNamespaceLister) Get(name string) (*v1.DispatchUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("dispatchuser"), name)
	}
	return obj.(*v1.DispatchUser), nil
}
